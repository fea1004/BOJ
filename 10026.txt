#include <bits/stdc++.h>

using namespace std;

char a[101][101];
int check[101][101];
queue <pair<int, int> > q;

int main() {
    int N, cnt = 0, cnt1 = 0;
    scanf("%d", &N);
    for(int i = 0; i < N; i++)
        for(int j = 0; j < N; j++)
            scanf(" %c", &a[i][j]);
    
    for(int i = 0; i < N; i++) {
        for(int j = 0; j < N; j++) {
            if(!check[i][j]) {
                char c = a[i][j];
                cnt++;
                q.push(make_pair(i, j));
                check[i][j] = cnt;
                while(!q.empty()) {
                    int x = q.front().first, y = q.front().second;
                    q.pop();
                    if(x - 1 >= 0 && a[x-1][y] == c && !check[x-1][y]) {
                        q.push(make_pair(x-1, y));
                        check[x-1][y] = cnt;
                    }
                    if(x + 1 < N && a[x+1][y] == c && !check[x+1][y]) {
                        q.push(make_pair(x+1, y));
                        check[x+1][y] = cnt;
                    }
                    if(y - 1 >= 0 && a[x][y-1] == c && !check[x][y-1]) {
                        q.push(make_pair(x, y-1));
                        check[x][y-1] = cnt;
                    }
                    if(y + 1 < N && a[x][y+1] == c && !check[x][y+1]) {
                        q.push(make_pair(x, y+1));
                        check[x][y+1] = cnt;
                    }
                }
            }
        }
    }
    
    memset(check, 0, sizeof(check));
    for(int i = 0; i < N; i++) {
        for(int j = 0; j < N; j++) {
            if(!check[i][j]) {
                char c = a[i][j];
                cnt1++;
                q.push(make_pair(i, j));
                check[i][j] = cnt1;
                while(!q.empty()) {
                    int x = q.front().first, y = q.front().second;
                    q.pop();
                    if(x - 1 >= 0 && (c == 'B' ? a[x-1][y] == c : (a[x-1][y] == 'R' || a[x-1][y] == 'G')) && !check[x-1][y]) {
                        q.push(make_pair(x-1, y));
                        check[x-1][y] = cnt1;
                    }
                    if(x + 1 < N && (c == 'B' ? a[x+1][y] == c : (a[x+1][y] == 'R' || a[x+1][y] == 'G')) && !check[x+1][y]) {
                        q.push(make_pair(x+1, y));
                        check[x+1][y] = cnt1;
                    }
                    if(y - 1 >= 0 && (c == 'B' ? a[x][y-1] == c : (a[x][y-1] == 'R' || a[x][y-1] == 'G')) && !check[x][y-1]) {
                        q.push(make_pair(x, y-1));
                        check[x][y-1] = cnt1;
                    }
                    if(y + 1 < N && (c == 'B' ? a[x][y+1] == c : (a[x][y+1] == 'R' || a[x][y+1] == 'G')) && !check[x][y+1]) {
                        q.push(make_pair(x, y+1));
                        check[x][y+1] = cnt1;
                    }
                }
            }
        }
    }
    printf("%d %d", cnt, cnt1);
    
    return 0;
}
